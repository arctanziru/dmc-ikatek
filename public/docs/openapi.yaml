openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://dmc-ikatek.test'
paths:
  /api/v1/auth/login:
    post:
      summary: 'Login User'
      operationId: loginUser
      description: 'Authenticate the user and return an access token.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Login success'
                  data:
                    user:
                      id: 1
                      name: 'John Doe'
                      email: john@example.com
                      username: johndoe
                      role: user
                    token: your_generated_token_here
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Login success'
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          name:
                            type: string
                            example: 'John Doe'
                          email:
                            type: string
                            example: john@example.com
                          username:
                            type: string
                            example: johndoe
                          role:
                            type: string
                            example: user
                      token:
                        type: string
                        example: your_generated_token_here
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Invalid credentials'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Invalid credentials'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "The user's email."
                  example: john@example.com
                  nullable: false
                password:
                  type: string
                  description: "The user's password."
                  example: password123
                  nullable: false
              required:
                - email
                - password
      security: []
  /api/v1/auth/logout:
    post:
      summary: 'Logout User'
      operationId: logoutUser
      description: "Revoke the user's access token and log them out."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Logout success'
                  data: []
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Logout success'
                  data:
                    type: array
                    example: []
      tags:
        - Authentication
  /api/v1/auth/me:
    get:
      summary: 'Get Authenticated User'
      operationId: getAuthenticatedUser
      description: "Retrieve the authenticated user's details."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'User retrieved successfully'
                  data:
                    user:
                      id: 1
                      name: 'John Doe'
                      email: john@example.com
                      username: johndoe
                      role: user
                    token: your_generated_token_here
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'User retrieved successfully'
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          name:
                            type: string
                            example: 'John Doe'
                          email:
                            type: string
                            example: john@example.com
                          username:
                            type: string
                            example: johndoe
                          role:
                            type: string
                            example: user
                      token:
                        type: string
                        example: your_generated_token_here
      tags:
        - Authentication
  /api/v1/news-category:
    get:
      summary: 'Get a list of news categories.'
      operationId: getAListOfNewsCategories
      description: ''
      parameters:
        -
          in: query
          name: search
          description: 'Search term.'
          example: technology
          required: false
          schema:
            type: string
            description: 'Search term.'
            example: technology
            nullable: false
        -
          in: query
          name: page
          description: 'Page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number.'
            example: 1
            nullable: false
        -
          in: query
          name: per_page
          description: 'Items per page.'
          example: 10
          required: false
          schema:
            type: integer
            description: 'Items per page.'
            example: 10
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: 1
                      name: Technology
                      created_at: '2023-01-01T00:00:00.000000Z'
                      updated_at: '2023-01-01T00:00:00.000000Z'
                  links:
                    first: 'http://example.com/news-categories?page=1'
                    last: 'http://example.com/news-categories?page=1'
                    prev: null
                    next: null
                  meta:
                    current_page: 1
                    from: 1
                    last_page: 1
                    path: 'http://example.com/news-categories'
                    per_page: 10
                    to: 1
                    total: 1
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        name: Technology
                        created_at: '2023-01-01T00:00:00.000000Z'
                        updated_at: '2023-01-01T00:00:00.000000Z'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: Technology
                        created_at:
                          type: string
                          example: '2023-01-01T00:00:00.000000Z'
                        updated_at:
                          type: string
                          example: '2023-01-01T00:00:00.000000Z'
                  links:
                    type: object
                    properties:
                      first:
                        type: string
                        example: 'http://example.com/news-categories?page=1'
                      last:
                        type: string
                        example: 'http://example.com/news-categories?page=1'
                      prev:
                        type: string
                        example: null
                      next:
                        type: string
                        example: null
                  meta:
                    type: object
                    properties:
                      current_page:
                        type: integer
                        example: 1
                      from:
                        type: integer
                        example: 1
                      last_page:
                        type: integer
                        example: 1
                      path:
                        type: string
                        example: 'http://example.com/news-categories'
                      per_page:
                        type: integer
                        example: 10
                      to:
                        type: integer
                        example: 1
                      total:
                        type: integer
                        example: 1
      tags:
        - 'News Categories'
      security: []
    post:
      summary: 'Create a new news category.'
      operationId: createANewNewsCategory
      description: ''
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'News Category created successfully.'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'News Category created successfully.'
      tags:
        - 'News Categories'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the news category.'
                  example: Technology
                  nullable: false
              required:
                - name
      security: []
  '/api/v1/news-category/{id}':
    get:
      summary: 'Get a specific news category.'
      operationId: getASpecificNewsCategory
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'News Category retrieved successfully.'
                  data:
                    id: 1
                    name: Technology
                    created_at: '2023-01-01T00:00:00.000000Z'
                    updated_at: '2023-01-01T00:00:00.000000Z'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'News Category retrieved successfully.'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: Technology
                      created_at:
                        type: string
                        example: '2023-01-01T00:00:00.000000Z'
                      updated_at:
                        type: string
                        example: '2023-01-01T00:00:00.000000Z'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'News Category not found.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'News Category not found.'
      tags:
        - 'News Categories'
      security: []
    put:
      summary: 'Update a specific news category.'
      operationId: updateASpecificNewsCategory
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'News Category updated successfully.'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'News Category updated successfully.'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'News Category not found.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'News Category not found.'
      tags:
        - 'News Categories'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the news category.'
                  example: Technology
                  nullable: false
              required:
                - name
      security: []
    delete:
      summary: 'Remove the specified news category from storage.'
      operationId: removeTheSpecifiedNewsCategoryFromStorage
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'News Category deleted successfully.'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'News Category deleted successfully.'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'News Category not found.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'News Category not found.'
      tags:
        - 'News Categories'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the news category.'
        example: 1
        required: true
        schema:
          type: integer
  /api/v1/news:
    get:
      summary: 'Get a list of news articles.'
      operationId: getAListOfNewsArticles
      description: ''
      parameters:
        -
          in: query
          name: page
          description: 'Optional. The page number.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Optional. The page number.'
            example: 1
            nullable: false
        -
          in: query
          name: per_page
          description: 'Optional. Items per page.'
          example: 10
          required: false
          schema:
            type: integer
            description: 'Optional. Items per page.'
            example: 10
            nullable: false
        -
          in: query
          name: category_id
          description: 'Optional. Filter by category ID.'
          example: 2
          required: false
          schema:
            type: integer
            description: 'Optional. Filter by category ID.'
            example: 2
            nullable: false
        -
          in: query
          name: search
          description: 'Optional. Search by title or content.'
          example: '"climate"'
          required: false
          schema:
            type: string
            description: 'Optional. Search by title or content.'
            example: '"climate"'
            nullable: false
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'News retrieved successfully.'
                  data:
                    items:
                      -
                        id: 1
                        title: 'Climate News'
                        description: 'Short description'
                        content: 'This is the content.'
                        author: 'John Doe'
                        news_category_id: 2
                        created_at: '2024-10-20T10:00:00Z'
                        updated_at: '2024-10-20T10:00:00Z'
                    pagination:
                      total: 50
                      count: 10
                      per_page: 10
                      current_page: 1
                      total_pages: 5
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'News retrieved successfully.'
                  data:
                    type: object
                    properties:
                      items:
                        type: array
                        example:
                          -
                            id: 1
                            title: 'Climate News'
                            description: 'Short description'
                            content: 'This is the content.'
                            author: 'John Doe'
                            news_category_id: 2
                            created_at: '2024-10-20T10:00:00Z'
                            updated_at: '2024-10-20T10:00:00Z'
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            title:
                              type: string
                              example: 'Climate News'
                            description:
                              type: string
                              example: 'Short description'
                            content:
                              type: string
                              example: 'This is the content.'
                            author:
                              type: string
                              example: 'John Doe'
                            news_category_id:
                              type: integer
                              example: 2
                            created_at:
                              type: string
                              example: '2024-10-20T10:00:00Z'
                            updated_at:
                              type: string
                              example: '2024-10-20T10:00:00Z'
                      pagination:
                        type: object
                        properties:
                          total:
                            type: integer
                            example: 50
                          count:
                            type: integer
                            example: 10
                          per_page:
                            type: integer
                            example: 10
                          current_page:
                            type: integer
                            example: 1
                          total_pages:
                            type: integer
                            example: 5
      tags:
        - 'News Management'
      security: []
    post:
      summary: 'Store a newly created news article in storage.'
      operationId: storeANewlyCreatedNewsArticleInStorage
      description: ''
      parameters: []
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'News created successfully.'
                  data:
                    id: 1
                    title: 'New Climate Policy'
                    image: 'http://example.com/image.jpg'
                    description: 'This is a short description.'
                    content: 'This is the content of the news article.'
                    author: 'Jane Doe'
                    category_id: 2
                    created_at: '2024-10-20T10:00:00Z'
                    updated_at: '2024-10-20T10:00:00Z'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'News created successfully.'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      title:
                        type: string
                        example: 'New Climate Policy'
                      image:
                        type: string
                        example: 'http://example.com/image.jpg'
                      description:
                        type: string
                        example: 'This is a short description.'
                      content:
                        type: string
                        example: 'This is the content of the news article.'
                      author:
                        type: string
                        example: 'Jane Doe'
                      category_id:
                        type: integer
                        example: 2
                      created_at:
                        type: string
                        example: '2024-10-20T10:00:00Z'
                      updated_at:
                        type: string
                        example: '2024-10-20T10:00:00Z'
      tags:
        - 'News Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'The title of the news article.'
                  example: '"New Climate Policy"'
                  nullable: false
                image:
                  type: string
                  description: 'The URL of the image.'
                  example: '"http://example.com/image.jpg"'
                  nullable: true
                description:
                  type: string
                  description: 'A short description of the news article.'
                  example: '"This is a short description."'
                  nullable: true
                content:
                  type: string
                  description: 'The content of the news article.'
                  example: '"This is the content of the news article."'
                  nullable: false
                author:
                  type: string
                  description: 'The author of the news article.'
                  example: '"Jane Doe"'
                  nullable: true
                category_id:
                  type: integer
                  description: 'The ID of the category.'
                  example: 2
                  nullable: false
              required:
                - title
                - content
                - category_id
      security: []
  '/api/v1/news/{id}':
    get:
      summary: 'Show the specified news article.'
      operationId: showTheSpecifiedNewsArticle
      description: ''
      parameters: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'News retrieved successfully.'
                  data:
                    id: 1
                    title: 'Climate News'
                    description: 'Short description'
                    content: 'This is the content.'
                    author: 'John Doe'
                    news_category_id: 2
                    created_at: '2024-10-20T10:00:00Z'
                    updated_at: '2024-10-20T10:00:00Z'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'News retrieved successfully.'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      title:
                        type: string
                        example: 'Climate News'
                      description:
                        type: string
                        example: 'Short description'
                      content:
                        type: string
                        example: 'This is the content.'
                      author:
                        type: string
                        example: 'John Doe'
                      news_category_id:
                        type: integer
                        example: 2
                      created_at:
                        type: string
                        example: '2024-10-20T10:00:00Z'
                      updated_at:
                        type: string
                        example: '2024-10-20T10:00:00Z'
        404:
          description: 'Not Found'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'News not found'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'News not found'
      tags:
        - 'News Management'
      security: []
    put:
      summary: 'Update the specified news article in storage.'
      operationId: updateTheSpecifiedNewsArticleInStorage
      description: ''
      parameters: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'News updated successfully.'
                  data:
                    id: 1
                    title: 'Updated Climate Policy'
                    image: 'http://example.com/image.jpg'
                    description: 'This is an updated short description.'
                    content: 'This is the updated content of the news article.'
                    author: 'Jane Doe'
                    category_id: 2
                    created_at: '2024-10-20T10:00:00Z'
                    updated_at: '2024-10-20T10:00:00Z'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'News updated successfully.'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      title:
                        type: string
                        example: 'Updated Climate Policy'
                      image:
                        type: string
                        example: 'http://example.com/image.jpg'
                      description:
                        type: string
                        example: 'This is an updated short description.'
                      content:
                        type: string
                        example: 'This is the updated content of the news article.'
                      author:
                        type: string
                        example: 'Jane Doe'
                      category_id:
                        type: integer
                        example: 2
                      created_at:
                        type: string
                        example: '2024-10-20T10:00:00Z'
                      updated_at:
                        type: string
                        example: '2024-10-20T10:00:00Z'
        404:
          description: 'Not Found'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'News not found'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'News not found'
      tags:
        - 'News Management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'The title of the news article.'
                  example: '"Updated Climate Policy"'
                  nullable: false
                image:
                  type: string
                  description: 'The URL of the image.'
                  example: '"http://example.com/image.jpg"'
                  nullable: true
                description:
                  type: string
                  description: 'A short description of the news article.'
                  example: '"This is an updated short description."'
                  nullable: true
                content:
                  type: string
                  description: 'The content of the news article.'
                  example: '"This is the updated content of the news article."'
                  nullable: false
                author:
                  type: string
                  description: 'The author of the news article.'
                  example: '"Jane Doe"'
                  nullable: true
                category_id:
                  type: integer
                  description: 'The ID of the category.'
                  example: 2
                  nullable: false
      security: []
    delete:
      summary: 'Remove the specified news article from storage.'
      operationId: removeTheSpecifiedNewsArticleFromStorage
      description: ''
      parameters: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'News deleted successfully.'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'News deleted successfully.'
        404:
          description: 'Not Found'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'News not found'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'News not found'
      tags:
        - 'News Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the news article.'
        example: 1
        required: true
        schema:
          type: integer
  /api/v1/user:
    get:
      summary: 'Display a listing of users.'
      operationId: displayAListingOfUsers
      description: ''
      parameters:
        -
          in: query
          name: page
          description: 'The page number. Defaults to 1.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'The page number. Defaults to 1.'
            example: 1
            nullable: false
        -
          in: query
          name: per_page
          description: 'The number of items per page. Defaults to 10.'
          example: 10
          required: false
          schema:
            type: integer
            description: 'The number of items per page. Defaults to 10.'
            example: 10
            nullable: false
        -
          in: query
          name: search
          description: 'Search term to filter users by name or email.'
          example: john
          required: false
          schema:
            type: string
            description: 'Search term to filter users by name or email.'
            example: john
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Users retrieved successfully.'
                  data:
                    items:
                      -
                        id: 1
                        name: 'John Doe'
                        email: john@example.com
                        created_at: '2023-01-01T00:00:00.000000Z'
                        updated_at: '2023-01-01T00:00:00.000000Z'
                    pagination:
                      first: 'http://example.com?page=1'
                      last: 'http://example.com?page=10'
                      prev: null
                      next: 'http://example.com?page=2'
                      current_page: 1
                      from: 1
                      last_page: 10
                      path: 'http://example.com'
                      per_page: 10
                      to: 10
                      total: 100
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Users retrieved successfully.'
                  data:
                    type: object
                    properties:
                      items:
                        type: array
                        example:
                          -
                            id: 1
                            name: 'John Doe'
                            email: john@example.com
                            created_at: '2023-01-01T00:00:00.000000Z'
                            updated_at: '2023-01-01T00:00:00.000000Z'
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: 'John Doe'
                            email:
                              type: string
                              example: john@example.com
                            created_at:
                              type: string
                              example: '2023-01-01T00:00:00.000000Z'
                            updated_at:
                              type: string
                              example: '2023-01-01T00:00:00.000000Z'
                      pagination:
                        type: object
                        properties:
                          first:
                            type: string
                            example: 'http://example.com?page=1'
                          last:
                            type: string
                            example: 'http://example.com?page=10'
                          prev:
                            type: string
                            example: null
                          next:
                            type: string
                            example: 'http://example.com?page=2'
                          current_page:
                            type: integer
                            example: 1
                          from:
                            type: integer
                            example: 1
                          last_page:
                            type: integer
                            example: 10
                          path:
                            type: string
                            example: 'http://example.com'
                          per_page:
                            type: integer
                            example: 10
                          to:
                            type: integer
                            example: 10
                          total:
                            type: integer
                            example: 100
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Bad request.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Bad request.'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Internal server error.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Internal server error.'
      tags:
        - 'User management'
      security: []
    post:
      summary: 'Store a newly created user in storage.'
      operationId: storeANewlyCreatedUserInStorage
      description: ''
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'User created successfully.'
                  data:
                    id: 1
                    name: 'John Doe'
                    username: johndoe
                    email: john@example.com
                    role: user
                    created_at: '2023-01-01T00:00:00.000000Z'
                    updated_at: '2023-01-01T00:00:00.000000Z'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'User created successfully.'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'John Doe'
                      username:
                        type: string
                        example: johndoe
                      email:
                        type: string
                        example: john@example.com
                      role:
                        type: string
                        example: user
                      created_at:
                        type: string
                        example: '2023-01-01T00:00:00.000000Z'
                      updated_at:
                        type: string
                        example: '2023-01-01T00:00:00.000000Z'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Validation error.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Validation error.'
        500:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n  \"status\": \"error\",\n  \"message\": \"Internal server error.\""
      tags:
        - 'User management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the user.'
                  example: 'John Doe'
                  nullable: false
                username:
                  type: string
                  description: 'The username of the user.'
                  example: johndoe
                  nullable: false
                email:
                  type: string
                  description: 'The email of the user.'
                  example: john@example.com
                  nullable: false
                password:
                  type: string
                  description: 'The password of the user. Minimum 6 characters.'
                  example: secret
                  nullable: false
                role:
                  type: string
                  description: "The role of the user. Must be one of 'user', 'admin', 'reporter'."
                  example: user
                  nullable: false
              required:
                - name
                - username
                - email
                - password
      security: []
  '/api/v1/user/{id}':
    get:
      summary: 'Display the specified user.'
      operationId: displayTheSpecifiedUser
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'User retrieved successfully.'
                  data:
                    id: 1
                    name: 'John Doe'
                    username: johndoe
                    email: john@example.com
                    role: user
                    created_at: '2023-01-01T00:00:00.000000Z'
                    updated_at: '2023-01-01T00:00:00.000000Z'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'User retrieved successfully.'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'John Doe'
                      username:
                        type: string
                        example: johndoe
                      email:
                        type: string
                        example: john@example.com
                      role:
                        type: string
                        example: user
                      created_at:
                        type: string
                        example: '2023-01-01T00:00:00.000000Z'
                      updated_at:
                        type: string
                        example: '2023-01-01T00:00:00.000000Z'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'User not found.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'User not found.'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Internal server error.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Internal server error.'
      tags:
        - 'User management'
      security: []
    put:
      summary: 'Update the specified user in storage.'
      operationId: updateTheSpecifiedUserInStorage
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'User updated successfully.'
                  data:
                    id: 1
                    name: 'John Doe'
                    username: johndoe
                    email: john@example.com
                    role: user
                    created_at: '2023-01-01T00:00:00.000000Z'
                    updated_at: '2023-01-01T00:00:00.000000Z'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'User updated successfully.'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'John Doe'
                      username:
                        type: string
                        example: johndoe
                      email:
                        type: string
                        example: john@example.com
                      role:
                        type: string
                        example: user
                      created_at:
                        type: string
                        example: '2023-01-01T00:00:00.000000Z'
                      updated_at:
                        type: string
                        example: '2023-01-01T00:00:00.000000Z'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Validation error.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Validation error.'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'User not found.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'User not found.'
        500:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n  \"status\": \"error\",\n  \"message\": \"Internal server error.\""
      tags:
        - 'User management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the user.'
                  example: 'John Doe'
                  nullable: false
                username:
                  type: string
                  description: 'The username of the user.'
                  example: johndoe
                  nullable: false
                email:
                  type: string
                  description: 'The email of the user.'
                  example: john@example.com
                  nullable: false
                password:
                  type: string
                  description: 'The password of the user. Minimum 6 characters.'
                  example: secret
                  nullable: false
                role:
                  type: string
                  description: "The role of the user. Must be one of 'user', 'admin', 'reporter'."
                  example: user
                  nullable: false
      security: []
    delete:
      summary: 'Remove the specified user from storage.'
      operationId: removeTheSpecifiedUserFromStorage
      description: ''
      parameters: []
      responses:
        204:
          description: ''
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'User not found.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'User not found.'
        500:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n  \"status\": \"error\",\n  \"message\": \"Internal server error.\""
      tags:
        - 'User management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user.'
        example: 1
        required: true
        schema:
          type: integer
tags:
  -
    name: Authentication
    description: "\nAPIs for managing authentication"
  -
    name: 'News Categories'
    description: "\nAPIs for managing news categories"
  -
    name: 'News Management'
    description: "\nAPIs for managing news"
  -
    name: 'User management'
    description: "\nAPIs for managing users"
